<script>
jQuery.noConflict();

//FIXME Ajax request every second(or more) to ask the server for the most recent updated_at, and compare with ours. Reload content if newer.  
/*jQuery(document).ready(function(){
	setTimeout("window.location.reload()",60000*5);
});*/

jQuery(document).ready(function($){
 

  $(".todos .done_todo [type=checkbox]").click(uncheck=function(){
	jQuery.ajax({
      type: 'POST',
      data: "id="+$(this).val()+"&state=notdone",
      url: window.location.href.replace("#","")+"/changeState",
      error: function() {
        $(".flash").renderFlash("notifier.actions.failure", "error", {"action":"uncheck"});
		$(this).bind("click",check);
		return false;
      },
      success: function(r) {
		var res = r.split("&");
		
		$("#"+res[0]).next().next().append(" <span>"+res[1]+"</span>");	
      }
    });

	var listId = $(this).parent().parent().attr("class").split(" ")[0].split("-")[1];

	$(this).parent().remove();
	$(this).parent().appendTo(".not_done-"+listId);
	$(this).next().remove();
	$(this).parent().addClass("todo");
	$(this).parent().removeClass("done_todo");
	$(this).next().next().children(':nth-child(1)').text($(this).next().next().children(':nth-child(1)').text().replace("(","").replace(")",""));
	$(this).removeAttr("checked");
	$(this).bind("click",check);
	
  });
	
  $(".todos .todo [type=checkbox]").click(check=function(){
	$("#temp").text("");
	jQuery.ajax({
      type: 'POST',
      data: "id="+$(this).val()+"&state=done",
      url: window.location.href.replace("#","")+"/changeState",
      error: function() {
        $(".flash").renderFlash("notifier.actions.failure", "error", {"action":"check"});
		$(this).bind("click",uncheck);
		return false;
      },
      success: function(r) {
	    var res = r.split("&");
	    
		$("#"+res[0]).after(" <strong class=\"date_finished\">"+res[1]+"</strong>");		
      }
    });
	
	var listId = $(this).parent().parent().attr("class").split(" ")[0].split("-")[1];
	
	
	$(this).parent().remove();	
	$(this).parent().prependTo(".done_todos-"+listId);
	$(this).next().next().children(':nth-child(1)').text("("+$(this).next().next().children(':nth-child(1)').text()+")");
	$(this).next().next().children(':nth-child(2)').remove();
	$(this).parent().addClass("done_todo");
	$(this).parent().removeClass("todo");
	
	
	$(this).bind("click",uncheck);
  });

  $(".title").click(function(event){
	$(this).next().fadeToggle("slow","linear");
	event.preventDefault();
  });

  $(".add_link").click(function(){
	$(this).parent().hide();
	$(this).parent().next().show();
	
	return false;
  });

 $(".done_adding_link").click(function(){
	$(this).parent().parent().parent().parent().hide();
	$(this).parent().parent().parent().parent().prev().show();
	
	return false;
 });

 $(".sortable").sortable({
	connectWith: ".connectable",
	stop: function(event,ui) {
		var order = $(".connectable").sortable("serialize");
		alert(inspect(ui.item[0]));
	}
 }).disableSelection();
	
	
	
	function inspect(obj, maxLevels, level)
	{
	  var str = '', type, msg;

	    // Start Input Validations
	    // Don't touch, we start iterating at level zero
	    if(level == null)  level = 0;

	    // At least you want to show the first level
	    if(maxLevels == null) maxLevels = 1;
	    if(maxLevels < 1)     
	        return '<font color="red">Error: Levels number must be > 0</font>';

	    // We start with a non null object
	    if(obj == null)
	    return '<font color="red">Error: Object <b>NULL</b></font>';
	    // End Input Validations

	    // Each Iteration must be indented
	    str += '<ul>';

	    // Start iterations for all objects in obj
	    for(property in obj)
	    {
	      try
	      {
	          // Show "property" and "type property"
	          type =  typeof(obj[property]);
			  if(type != "function")		
	          str += '<li>(' + type + ') ' + property + 
	                 ( (obj[property]==null)?(': <b>null</b>'):('')) + '</li>';

	          // We keep iterating if this property is an Object, non null
	          // and we are inside the required number of levels
	          if((type == 'object') && (obj[property] != null) && (level+1 < maxLevels))
	          str += inspect(obj[property], maxLevels, level+1);
	      }
	      catch(err)
	      {
	        // Is there some properties in obj we can't access? Print it red.
	        if(typeof(err) == 'string') msg = err;
	        else if(err.message)        msg = err.message;
	        else if(err.description)    msg = err.description;
	        else                        msg = 'Unknown';

	        str += '<li><font color="red">(Error) ' + property + ': ' + msg +'</font></li>';
	      }
	    }

	      // Close indent
	      str += '</ul>';

	    return str;
	}
	
}); 
</script>

<% counter = 0%>
<% @lists.each do |list| %>
<div class="title">
	<h2><%= link_to list.name, admin_project_to_do_lists_path %></h2>
</div>
<div class="the_list-<%= counter %>" style="display:none;">
  <div class="description">
    <%= list.description %>
  </div>
  <div class="todos">
    <% divided_hash = list.divide_done_todos %>	
    
    <ul class="not_done-<%= counter %> connectable sortable">	
      <% divided_hash[:notDone].each do |todo| %>
		<% if todo.user && todo.user == current_user %>
			<li id="item_<%= todo.id  %>" class="todo highlight">
		  <% else %>		
	  	  	<li id="item_<%= todo.id  %>" class="todo">
		  <% end %>
          <input type="checkbox" id="<%= todo.id %>" value="<%= todo.id %>" /> 	
          <span class="todo_desc"><%= todo.description %></span>
		  <% if todo.user || todo.due_date %>
		  <span class="todo_info">
		  	<% if todo.user %>
		  	 <span><%= todo.user.name %></span>
		  	<% end %>
		  	<% if todo.due_date %>
		  		<span><%= l(todo.due_date, :format => :medium) %></span>
		  	<% end %>	
		  </span>	 
		  <% end %>
        </li>
      <% end %>
    </ul>
  
	<div class="add_button-<%= counter %>">
		<%= link_to t("admin.to_do.add_new.link"), "#", {:class => "add_link" } %>
	</div>	
	<div class="add_todo-<%= counter %>" style="display:none;">
		<% semantic_form_for(:todo, :url => admin_project_to_dos_path) do |f| %>
		  <% f.inputs do %>
		    <%= f.input :description, :as => :text, :input_html => {:rows => 3, :cols => 40}, :label => t("admin.to_do.add_new.title"), :required => false %>
			<%= f.input :responsible, :as => :select, :collection => User.all, :required => false, :hint => t("admin.to_do.add_new.hint") %>
			<%= f.input :due_date, :as => :date, :required => false, :include_blank => false %>
			<%= f.input :to_do_list_id, :as => :hidden, :value => list.id %>
		  <% end  %>
		  <% f.buttons do %>
		    <%= f.commit_button :label => t("admin.to_do.add_new.add_button") %>
		    <span>or</span>
			<%= link_to t("admin.to_do.add_new.done_adding"), "#",{:class => "done_adding_link"} %>
		  <% end %>
		<% end %>		
	</div>	

    <ul class="done_todos-<%= counter %> sortable">
  	<% divided_hash[:done].each do |todo| %>
	  <% if todo.user && todo.user == current_user %>
		<li class="done_todo highlight">
	  <% else %>		
  	  	<li class="done_todo">
	  <% end %>
  	    <input type="checkbox" id="<%= todo.id %>" value="<%= todo.id %>" checked="yes" />
		<strong class="date_finished"><%= l(todo.finished_date, :format => :short) if todo.finished_date %></strong>
  	    <span class="done_todo_desc"><%= todo.description %></span>
		<% if todo.user  %>
		  <span class="done_todo_info">
				<% if todo.user %>
				 <span>(<%= todo.user.name %>)</span>
				<% end %>
		  </span>	 
		<% end %>
  	  </li>
  	<% end %>
    </ul>	
  </div>
</div>
<% counter = counter+1 %>
<% end %>	

